// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2020 18:41:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    L3P4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module L3P4_vlg_sample_tst(
	Clock,
	D,
	sampler_tx
);
input  Clock;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module L3P4_vlg_check_tst (
	Qa,
	Qb,
	Qc,
	sampler_rx
);
input  Qa;
input  Qb;
input  Qc;
input sampler_rx;

reg  Qa_expected;
reg  Qb_expected;
reg  Qc_expected;

reg  Qa_prev;
reg  Qb_prev;
reg  Qc_prev;

reg  Qa_expected_prev;
reg  Qb_expected_prev;
reg  Qc_expected_prev;

reg  last_Qa_exp;
reg  last_Qb_exp;
reg  last_Qc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Qa_prev = Qa;
	Qb_prev = Qb;
	Qc_prev = Qc;
end

// update expected /o prevs

always @(trigger)
begin
	Qa_expected_prev = Qa_expected;
	Qb_expected_prev = Qb_expected;
	Qc_expected_prev = Qc_expected;
end



// expected Qa
initial
begin
	Qa_expected = 1'bX;
end 

// expected Qb
initial
begin
	Qb_expected = 1'bX;
end 

// expected Qc
initial
begin
	Qc_expected = 1'bX;
end 
// generate trigger
always @(Qa_expected or Qa or Qb_expected or Qb or Qc_expected or Qc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Qa = %b | expected Qb = %b | expected Qc = %b | ",Qa_expected_prev,Qb_expected_prev,Qc_expected_prev);
	$display("| real Qa = %b | real Qb = %b | real Qc = %b | ",Qa_prev,Qb_prev,Qc_prev);
`endif
	if (
		( Qa_expected_prev !== 1'bx ) && ( Qa_prev !== Qa_expected_prev )
		&& ((Qa_expected_prev !== last_Qa_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qa_expected_prev);
		$display ("     Real value = %b", Qa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Qa_exp = Qa_expected_prev;
	end
	if (
		( Qb_expected_prev !== 1'bx ) && ( Qb_prev !== Qb_expected_prev )
		&& ((Qb_expected_prev !== last_Qb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qb_expected_prev);
		$display ("     Real value = %b", Qb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qb_exp = Qb_expected_prev;
	end
	if (
		( Qc_expected_prev !== 1'bx ) && ( Qc_prev !== Qc_expected_prev )
		&& ((Qc_expected_prev !== last_Qc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qc_expected_prev);
		$display ("     Real value = %b", Qc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Qc_exp = Qc_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module L3P4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg D;
// wires                                               
wire Qa;
wire Qb;
wire Qc;

wire sampler;                             

// assign statements (if any)                          
L3P4 i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.D(D),
	.Qa(Qa),
	.Qb(Qb),
	.Qc(Qc)
);

// Clock
initial
begin
	Clock = 1'b0;
	Clock = #80000 1'b1;
	Clock = #80000 1'b0;
	Clock = #80000 1'b1;
	Clock = #80000 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #64512 1'b1;
	D = #32768 1'b0;
	D = #20480 1'b1;
	D = #25600 1'b0;
	D = #26640 1'b1;
	D = #20000 1'b0;
	D = #10000 1'b1;
	D = #14016 1'b0;
	D = #39936 1'b1;
	D = #19456 1'b0;
	D = #13312 1'b1;
	D = #48128 1'b0;
end 

L3P4_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.D(D),
	.sampler_tx(sampler)
);

L3P4_vlg_check_tst tb_out(
	.Qa(Qa),
	.Qb(Qb),
	.Qc(Qc),
	.sampler_rx(sampler)
);
endmodule

